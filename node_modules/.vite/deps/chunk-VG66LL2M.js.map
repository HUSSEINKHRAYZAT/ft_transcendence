{
  "version": 3,
  "sources": ["../../../dev/core/src/Audio/sound.ts"],
  "sourcesContent": ["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { ISoundOptions } from \"./Interfaces/ISoundOptions\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\nimport { _RetryWithInterval } from \"core/Misc/timingTools\";\r\n\r\n/**\r\n * Defines a sound that can be played in the application.\r\n * The sound can either be an ambient track or a simple sound played in reaction to a user action.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n */\r\nexport class Sound {\r\n    /**\r\n     * The name of the sound in the scene.\r\n     */\r\n    public name: string;\r\n    /**\r\n     * Does the sound autoplay once loaded.\r\n     */\r\n    public autoplay: boolean = false;\r\n\r\n    private _loop = false;\r\n    /**\r\n     * Does the sound loop after it finishes playing once.\r\n     */\r\n    public get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    public set loop(value: boolean) {\r\n        if (value === this._loop) {\r\n            return;\r\n        }\r\n\r\n        this._loop = value;\r\n        this.updateOptions({ loop: value });\r\n    }\r\n\r\n    /**\r\n     * Does the sound use a custom attenuation curve to simulate the falloff\r\n     * happening when the source gets further away from the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-your-own-custom-attenuation-function\r\n     */\r\n    public useCustomAttenuation: boolean = false;\r\n    /**\r\n     * The sound track id this sound belongs to.\r\n     */\r\n    public soundTrackId: number;\r\n    /**\r\n     * Is this sound currently played.\r\n     */\r\n    public isPlaying: boolean = false;\r\n    /**\r\n     * Is this sound currently paused.\r\n     */\r\n    public isPaused: boolean = false;\r\n    /**\r\n     * Define the reference distance the sound should be heard perfectly.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public refDistance: number = 1;\r\n    /**\r\n     * Define the roll off factor of spatial sounds.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public rolloffFactor: number = 1;\r\n    /**\r\n     * Define the max distance the sound should be heard (intensity just became 0 at this point).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public maxDistance: number = 100;\r\n    /**\r\n     * Define the distance attenuation model the sound will follow.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public distanceModel: string = \"linear\";\r\n    /**\r\n     * @internal\r\n     * Back Compat\r\n     **/\r\n    public onended: () => any;\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the sound.\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * Observable event when the current playing sound finishes.\r\n     */\r\n    public onEndedObservable = new Observable<Sound>();\r\n\r\n    /**\r\n     * Gets the current time for the sound.\r\n     */\r\n    public get currentTime(): number {\r\n        if (this._htmlAudioElement) {\r\n            return this._htmlAudioElement.currentTime;\r\n        }\r\n\r\n        if (AbstractEngine.audioEngine?.audioContext && (this.isPlaying || this.isPaused)) {\r\n            // The `_currentTime` member is only updated when the sound is paused. Add the time since the last start\r\n            // to get the actual current time.\r\n            const timeSinceLastStart = this.isPaused ? 0 : AbstractEngine.audioEngine.audioContext.currentTime - this._startTime;\r\n            return this._currentTime + timeSinceLastStart;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Does this sound enables spatial sound.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public get spatialSound(): boolean {\r\n        return this._spatialSound;\r\n    }\r\n\r\n    /**\r\n     * Does this sound enables spatial sound.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public set spatialSound(newValue: boolean) {\r\n        if (newValue == this._spatialSound) {\r\n            return;\r\n        }\r\n\r\n        const wasPlaying = this.isPlaying;\r\n        this.pause();\r\n\r\n        if (newValue) {\r\n            this._spatialSound = newValue;\r\n            this._updateSpatialParameters();\r\n        } else {\r\n            this._disableSpatialSound();\r\n        }\r\n\r\n        if (wasPlaying) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    private _spatialSound: boolean = false;\r\n    private _panningModel: string = \"equalpower\";\r\n    private _playbackRate: number = 1;\r\n    private _streaming: boolean = false;\r\n    private _startTime: number = 0;\r\n    private _currentTime: number = 0;\r\n    private _position: Vector3 = Vector3.Zero();\r\n    private _localDirection: Vector3 = new Vector3(1, 0, 0);\r\n    private _volume: number = 1;\r\n    private _isReadyToPlay: boolean = false;\r\n    private _isDirectional: boolean = false;\r\n    private _readyToPlayCallback: Nullable<() => any>;\r\n    private _audioBuffer: Nullable<AudioBuffer>;\r\n    private _soundSource: Nullable<AudioBufferSourceNode>;\r\n    private _streamingSource: Nullable<AudioNode>;\r\n    private _soundPanner: Nullable<PannerNode>;\r\n    private _soundGain: Nullable<GainNode>;\r\n    private _inputAudioNode: Nullable<AudioNode>;\r\n    private _outputAudioNode: Nullable<AudioNode>;\r\n    // Used if you'd like to create a directional sound.\r\n    // If not set, the sound will be omnidirectional\r\n    private _coneInnerAngle: number = 360;\r\n    private _coneOuterAngle: number = 360;\r\n    private _coneOuterGain: number = 0;\r\n    private _scene: Scene;\r\n    private _connectedTransformNode: Nullable<TransformNode>;\r\n    private _customAttenuationFunction: (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => number;\r\n    private _registerFunc: Nullable<(connectedMesh: TransformNode) => void>;\r\n    private _isOutputConnected = false;\r\n    private _htmlAudioElement: Nullable<HTMLAudioElement>;\r\n    private _urlType: \"Unknown\" | \"String\" | \"Array\" | \"ArrayBuffer\" | \"MediaStream\" | \"AudioBuffer\" | \"MediaElement\" = \"Unknown\";\r\n    private _length?: number;\r\n    private _offset?: number;\r\n    private _tryToPlayTimeout: Nullable<NodeJS.Timeout>;\r\n    private _audioUnlockedObserver?: Nullable<Observer<IAudioEngine>>;\r\n    private _url?: Nullable<string>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"AudioSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Create a sound and attach it to a scene\r\n     * @param name Name of your sound\r\n     * @param urlOrArrayBuffer Url to the sound to load async or ArrayBuffer, it also works with MediaStreams and AudioBuffers\r\n     * @param scene defines the scene the sound belongs to\r\n     * @param readyToPlayCallback Provide a callback function if you'd like to load your code once the sound is ready to be played\r\n     * @param options Objects to provide with the current available options: autoplay, loop, volume, spatialSound, maxDistance, rolloffFactor, refDistance, distanceModel, panningModel, streaming\r\n     */\r\n    constructor(name: string, urlOrArrayBuffer: any, scene?: Nullable<Scene>, readyToPlayCallback: Nullable<() => void> = null, options?: ISoundOptions) {\r\n        this.name = name;\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        Sound._SceneComponentInitialization(scene);\r\n\r\n        this._readyToPlayCallback = readyToPlayCallback;\r\n        // Default custom attenuation function is a linear attenuation\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this._customAttenuationFunction = (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => {\r\n            if (currentDistance < maxDistance) {\r\n                return currentVolume * (1 - currentDistance / maxDistance);\r\n            } else {\r\n                return 0;\r\n            }\r\n        };\r\n        if (options) {\r\n            this.autoplay = options.autoplay || false;\r\n            this._loop = options.loop || false;\r\n            // if volume === 0, we need another way to check this option\r\n            if (options.volume !== undefined) {\r\n                this._volume = options.volume;\r\n            }\r\n            this._spatialSound = options.spatialSound ?? false;\r\n            this.maxDistance = options.maxDistance ?? 100;\r\n            this.useCustomAttenuation = options.useCustomAttenuation ?? false;\r\n            this.rolloffFactor = options.rolloffFactor || 1;\r\n            this.refDistance = options.refDistance || 1;\r\n            this.distanceModel = options.distanceModel || \"linear\";\r\n            this._playbackRate = options.playbackRate || 1;\r\n            this._streaming = options.streaming ?? false;\r\n            this._length = options.length;\r\n            this._offset = options.offset;\r\n        }\r\n\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && AbstractEngine.audioEngine.audioContext) {\r\n            this._soundGain = AbstractEngine.audioEngine.audioContext.createGain();\r\n            this._soundGain.gain.value = this._volume;\r\n            this._inputAudioNode = this._soundGain;\r\n            this._outputAudioNode = this._soundGain;\r\n            if (this._spatialSound) {\r\n                this._createSpatialParameters();\r\n            }\r\n            this._scene.mainSoundTrack.addSound(this);\r\n            let validParameter = true;\r\n\r\n            // if no parameter is passed, you need to call setAudioBuffer yourself to prepare the sound\r\n            if (urlOrArrayBuffer) {\r\n                try {\r\n                    if (typeof urlOrArrayBuffer === \"string\") {\r\n                        this._urlType = \"String\";\r\n                        this._url = urlOrArrayBuffer;\r\n                    } else if (urlOrArrayBuffer instanceof ArrayBuffer) {\r\n                        this._urlType = \"ArrayBuffer\";\r\n                    } else if (urlOrArrayBuffer instanceof HTMLMediaElement) {\r\n                        this._urlType = \"MediaElement\";\r\n                    } else if (urlOrArrayBuffer instanceof MediaStream) {\r\n                        this._urlType = \"MediaStream\";\r\n                    } else if (urlOrArrayBuffer instanceof AudioBuffer) {\r\n                        this._urlType = \"AudioBuffer\";\r\n                    } else if (Array.isArray(urlOrArrayBuffer)) {\r\n                        this._urlType = \"Array\";\r\n                    }\r\n\r\n                    let urls: string[] = [];\r\n                    let codecSupportedFound = false;\r\n\r\n                    switch (this._urlType) {\r\n                        case \"MediaElement\":\r\n                            this._streaming = true;\r\n                            this._isReadyToPlay = true;\r\n                            this._streamingSource = AbstractEngine.audioEngine.audioContext.createMediaElementSource(urlOrArrayBuffer);\r\n\r\n                            if (this.autoplay) {\r\n                                this.play(0, this._offset, this._length);\r\n                            }\r\n\r\n                            if (this._readyToPlayCallback) {\r\n                                this._readyToPlayCallback();\r\n                            }\r\n                            break;\r\n                        case \"MediaStream\":\r\n                            this._streaming = true;\r\n                            this._isReadyToPlay = true;\r\n                            this._streamingSource = AbstractEngine.audioEngine.audioContext.createMediaStreamSource(urlOrArrayBuffer);\r\n\r\n                            if (this.autoplay) {\r\n                                this.play(0, this._offset, this._length);\r\n                            }\r\n\r\n                            if (this._readyToPlayCallback) {\r\n                                this._readyToPlayCallback();\r\n                            }\r\n                            break;\r\n                        case \"ArrayBuffer\":\r\n                            if ((<ArrayBuffer>urlOrArrayBuffer).byteLength > 0) {\r\n                                codecSupportedFound = true;\r\n                                this._soundLoaded(urlOrArrayBuffer);\r\n                            }\r\n                            break;\r\n                        case \"AudioBuffer\":\r\n                            this._audioBufferLoaded(urlOrArrayBuffer);\r\n                            break;\r\n                        case \"String\":\r\n                            urls.push(urlOrArrayBuffer);\r\n                        // eslint-disable-next-line no-fallthrough\r\n                        case \"Array\":\r\n                            if (urls.length === 0) {\r\n                                urls = urlOrArrayBuffer;\r\n                            }\r\n                            // If we found a supported format, we load it immediately and stop the loop\r\n                            for (let i = 0; i < urls.length; i++) {\r\n                                const url = urls[i];\r\n                                codecSupportedFound =\r\n                                    (options && options.skipCodecCheck) ||\r\n                                    (url.indexOf(\".mp3\", url.length - 4) !== -1 && AbstractEngine.audioEngine.isMP3supported) ||\r\n                                    (url.indexOf(\".ogg\", url.length - 4) !== -1 && AbstractEngine.audioEngine.isOGGsupported) ||\r\n                                    url.indexOf(\".wav\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\".m4a\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\".mp4\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\"blob:\") !== -1;\r\n                                if (codecSupportedFound) {\r\n                                    // Loading sound\r\n                                    if (!this._streaming) {\r\n                                        this._scene._loadFile(\r\n                                            url,\r\n                                            (data) => {\r\n                                                this._soundLoaded(data as ArrayBuffer);\r\n                                            },\r\n                                            undefined,\r\n                                            true,\r\n                                            true,\r\n                                            (exception) => {\r\n                                                if (exception) {\r\n                                                    Logger.Error(\"XHR \" + exception.status + \" error on: \" + url + \".\");\r\n                                                }\r\n                                                Logger.Error(\"Sound creation aborted.\");\r\n                                                this._scene.mainSoundTrack.removeSound(this);\r\n                                            }\r\n                                        );\r\n                                    }\r\n                                    // Streaming sound using HTML5 Audio tag\r\n                                    else {\r\n                                        this._htmlAudioElement = new Audio(url);\r\n                                        this._htmlAudioElement.controls = false;\r\n                                        this._htmlAudioElement.loop = this.loop;\r\n                                        Tools.SetCorsBehavior(url, this._htmlAudioElement);\r\n                                        this._htmlAudioElement.preload = \"auto\";\r\n                                        this._htmlAudioElement.addEventListener(\r\n                                            \"canplaythrough\",\r\n                                            () => {\r\n                                                this._isReadyToPlay = true;\r\n                                                if (this.autoplay) {\r\n                                                    this.play(0, this._offset, this._length);\r\n                                                }\r\n                                                if (this._readyToPlayCallback) {\r\n                                                    this._readyToPlayCallback();\r\n                                                }\r\n                                            },\r\n                                            { once: true }\r\n                                        );\r\n                                        document.body.appendChild(this._htmlAudioElement);\r\n                                        this._htmlAudioElement.load();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            validParameter = false;\r\n                            break;\r\n                    }\r\n\r\n                    if (!validParameter) {\r\n                        Logger.Error(\"Parameter must be a URL to the sound, an Array of URLs (.mp3 & .ogg) or an ArrayBuffer of the sound.\");\r\n                    } else {\r\n                        if (!codecSupportedFound) {\r\n                            this._isReadyToPlay = true;\r\n                            // Simulating a ready to play event to avoid breaking code path\r\n                            if (this._readyToPlayCallback) {\r\n                                setTimeout(() => {\r\n                                    if (this._readyToPlayCallback) {\r\n                                        this._readyToPlayCallback();\r\n                                    }\r\n                                }, 1000);\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (ex) {\r\n                    Logger.Error(\"Unexpected error. Sound creation aborted.\");\r\n                    this._scene.mainSoundTrack.removeSound(this);\r\n                }\r\n            }\r\n        } else {\r\n            // Adding an empty sound to avoid breaking audio calls for non Web Audio browsers\r\n            this._scene.mainSoundTrack.addSound(this);\r\n            if (AbstractEngine.audioEngine && !AbstractEngine.audioEngine.WarnedWebAudioUnsupported) {\r\n                Logger.Error(\"Web Audio is not supported by your browser.\");\r\n                AbstractEngine.audioEngine.WarnedWebAudioUnsupported = true;\r\n            }\r\n            // Simulating a ready to play event to avoid breaking code for non web audio browsers\r\n            if (this._readyToPlayCallback) {\r\n                setTimeout(() => {\r\n                    if (this._readyToPlayCallback) {\r\n                        this._readyToPlayCallback();\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the sound and its associated resources\r\n     */\r\n    public dispose() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio) {\r\n            if (this.isPlaying) {\r\n                this.stop();\r\n            }\r\n            this._isReadyToPlay = false;\r\n            if (this.soundTrackId === -1) {\r\n                this._scene.mainSoundTrack.removeSound(this);\r\n            } else if (this._scene.soundTracks) {\r\n                this._scene.soundTracks[this.soundTrackId].removeSound(this);\r\n            }\r\n            if (this._soundGain) {\r\n                this._soundGain.disconnect();\r\n                this._soundGain = null;\r\n            }\r\n            if (this._soundPanner) {\r\n                this._soundPanner.disconnect();\r\n                this._soundPanner = null;\r\n            }\r\n            if (this._soundSource) {\r\n                this._soundSource.disconnect();\r\n                this._soundSource = null;\r\n            }\r\n            this._audioBuffer = null;\r\n\r\n            if (this._htmlAudioElement) {\r\n                this._htmlAudioElement.pause();\r\n                this._htmlAudioElement.src = \"\";\r\n                document.body.removeChild(this._htmlAudioElement);\r\n                this._htmlAudioElement = null;\r\n            }\r\n\r\n            if (this._streamingSource) {\r\n                this._streamingSource.disconnect();\r\n                this._streamingSource = null;\r\n            }\r\n\r\n            if (this._connectedTransformNode && this._registerFunc) {\r\n                this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n                this._connectedTransformNode = null;\r\n            }\r\n\r\n            this._clearTimeoutsAndObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the sounds is ready to be played or not.\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public isReady(): boolean {\r\n        return this._isReadyToPlay;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Sound\";\r\n    }\r\n\r\n    private _audioBufferLoaded(buffer: AudioBuffer) {\r\n        if (!AbstractEngine.audioEngine?.audioContext) {\r\n            return;\r\n        }\r\n        this._audioBuffer = buffer;\r\n        this._isReadyToPlay = true;\r\n        if (this.autoplay) {\r\n            this.play(0, this._offset, this._length);\r\n        }\r\n        if (this._readyToPlayCallback) {\r\n            this._readyToPlayCallback();\r\n        }\r\n    }\r\n\r\n    private _soundLoaded(audioData: ArrayBuffer) {\r\n        if (!AbstractEngine.audioEngine?.audioContext) {\r\n            return;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        AbstractEngine.audioEngine.audioContext.decodeAudioData(\r\n            audioData,\r\n            (buffer) => {\r\n                this._audioBufferLoaded(buffer);\r\n            },\r\n            (err: any) => {\r\n                Logger.Error(\"Error while decoding audio data for: \" + this.name + \" / Error: \" + err);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the data of the sound from an audiobuffer\r\n     * @param audioBuffer The audioBuffer containing the data\r\n     */\r\n    public setAudioBuffer(audioBuffer: AudioBuffer): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio) {\r\n            this._audioBuffer = audioBuffer;\r\n            this._isReadyToPlay = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the current sounds options such as maxdistance, loop...\r\n     * @param options A JSON object containing values named as the object properties\r\n     */\r\n    public updateOptions(options: ISoundOptions): void {\r\n        if (options) {\r\n            this.loop = options.loop ?? this.loop;\r\n            this.maxDistance = options.maxDistance ?? this.maxDistance;\r\n            this.useCustomAttenuation = options.useCustomAttenuation ?? this.useCustomAttenuation;\r\n            this.rolloffFactor = options.rolloffFactor ?? this.rolloffFactor;\r\n            this.refDistance = options.refDistance ?? this.refDistance;\r\n            this.distanceModel = options.distanceModel ?? this.distanceModel;\r\n            this._playbackRate = options.playbackRate ?? this._playbackRate;\r\n            this._length = options.length ?? undefined;\r\n            this.spatialSound = options.spatialSound ?? this._spatialSound;\r\n            this._setOffset(options.offset ?? undefined);\r\n            this.setVolume(options.volume ?? this._volume);\r\n            this._updateSpatialParameters();\r\n            if (this.isPlaying) {\r\n                if (this._streaming && this._htmlAudioElement) {\r\n                    this._htmlAudioElement.playbackRate = this._playbackRate;\r\n                    if (this._htmlAudioElement.loop !== this.loop) {\r\n                        this._htmlAudioElement.loop = this.loop;\r\n                    }\r\n                } else {\r\n                    if (this._soundSource) {\r\n                        this._soundSource.playbackRate.value = this._playbackRate;\r\n                        if (this._soundSource.loop !== this.loop) {\r\n                            this._soundSource.loop = this.loop;\r\n                        }\r\n                        if (this._offset !== undefined && this._soundSource.loopStart !== this._offset) {\r\n                            this._soundSource.loopStart = this._offset;\r\n                        }\r\n                        if (this._length !== undefined && this._length !== this._soundSource.loopEnd) {\r\n                            this._soundSource.loopEnd = (this._offset! | 0) + this._length;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _createSpatialParameters() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && AbstractEngine.audioEngine.audioContext) {\r\n            if (this._scene.headphone) {\r\n                this._panningModel = \"HRTF\";\r\n            }\r\n            this._soundPanner = this._soundPanner ?? AbstractEngine.audioEngine.audioContext.createPanner();\r\n            if (this._soundPanner && this._outputAudioNode) {\r\n                this._updateSpatialParameters();\r\n                this._soundPanner.connect(this._outputAudioNode);\r\n                this._inputAudioNode = this._soundPanner;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _disableSpatialSound() {\r\n        if (!this._spatialSound) {\r\n            return;\r\n        }\r\n        this._inputAudioNode = this._soundGain;\r\n        this._soundPanner?.disconnect();\r\n        this._soundPanner = null;\r\n        this._spatialSound = false;\r\n    }\r\n\r\n    private _updateSpatialParameters() {\r\n        if (!this._spatialSound) {\r\n            return;\r\n        }\r\n        if (this._soundPanner) {\r\n            if (this.useCustomAttenuation) {\r\n                // Tricks to disable in a way embedded Web Audio attenuation\r\n                this._soundPanner.distanceModel = \"linear\";\r\n                this._soundPanner.maxDistance = Number.MAX_VALUE;\r\n                this._soundPanner.refDistance = 1;\r\n                this._soundPanner.rolloffFactor = 1;\r\n                this._soundPanner.panningModel = this._panningModel as any;\r\n            } else {\r\n                this._soundPanner.distanceModel = this.distanceModel as any;\r\n                this._soundPanner.maxDistance = this.maxDistance;\r\n                this._soundPanner.refDistance = this.refDistance;\r\n                this._soundPanner.rolloffFactor = this.rolloffFactor;\r\n                this._soundPanner.panningModel = this._panningModel as any;\r\n            }\r\n        } else {\r\n            this._createSpatialParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to HRTF:\r\n     * Renders a stereo output of higher quality than equalpower — it uses a convolution with measured impulse responses from human subjects.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToHRTF() {\r\n        this._panningModel = \"HRTF\";\r\n        this._switchPanningModel();\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to Equal Power:\r\n     * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToEqualPower() {\r\n        this._panningModel = \"equalpower\";\r\n        this._switchPanningModel();\r\n    }\r\n\r\n    private _switchPanningModel() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n            this._soundPanner.panningModel = this._panningModel as any;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect this sound to a sound track audio node like gain...\r\n     * @param soundTrackAudioNode the sound track audio node to connect to\r\n     */\r\n    public connectToSoundTrackAudioNode(soundTrackAudioNode: AudioNode): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            if (this._isOutputConnected) {\r\n                this._outputAudioNode.disconnect();\r\n            }\r\n            this._outputAudioNode.connect(soundTrackAudioNode);\r\n            this._isOutputConnected = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transform this sound into a directional source\r\n     * @param coneInnerAngle Size of the inner cone in degree\r\n     * @param coneOuterAngle Size of the outer cone in degree\r\n     * @param coneOuterGain Volume of the sound outside the outer cone (between 0.0 and 1.0)\r\n     */\r\n    public setDirectionalCone(coneInnerAngle: number, coneOuterAngle: number, coneOuterGain: number): void {\r\n        if (coneOuterAngle < coneInnerAngle) {\r\n            Logger.Error(\"setDirectionalCone(): outer angle of the cone must be superior or equal to the inner angle.\");\r\n            return;\r\n        }\r\n        this._coneInnerAngle = coneInnerAngle;\r\n        this._coneOuterAngle = coneOuterAngle;\r\n        this._coneOuterGain = coneOuterGain;\r\n        this._isDirectional = true;\r\n\r\n        if (this.isPlaying && this.loop) {\r\n            this.stop();\r\n            this.play(0, this._offset, this._length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the inner angle for the directional cone.\r\n     */\r\n    public get directionalConeInnerAngle(): number {\r\n        return this._coneInnerAngle;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the inner angle for the directional cone.\r\n     */\r\n    public set directionalConeInnerAngle(value: number) {\r\n        if (value != this._coneInnerAngle) {\r\n            if (this._coneOuterAngle < value) {\r\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneInnerAngle = value;\r\n            if (AbstractEngine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n                this._soundPanner.coneInnerAngle = this._coneInnerAngle;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the outer angle for the directional cone.\r\n     */\r\n    public get directionalConeOuterAngle(): number {\r\n        return this._coneOuterAngle;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the outer angle for the directional cone.\r\n     */\r\n    public set directionalConeOuterAngle(value: number) {\r\n        if (value != this._coneOuterAngle) {\r\n            if (value < this._coneInnerAngle) {\r\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneOuterAngle = value;\r\n            if (AbstractEngine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n                this._soundPanner.coneOuterAngle = this._coneOuterAngle;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the emitter if spatial sound is enabled\r\n     * @param newPosition Defines the new position\r\n     */\r\n    public setPosition(newPosition: Vector3): void {\r\n        if (newPosition.equals(this._position)) {\r\n            return;\r\n        }\r\n        this._position.copyFrom(newPosition);\r\n\r\n        if (\r\n            AbstractEngine.audioEngine?.canUseWebAudio &&\r\n            this._spatialSound &&\r\n            this._soundPanner &&\r\n            !isNaN(this._position.x) &&\r\n            !isNaN(this._position.y) &&\r\n            !isNaN(this._position.z)\r\n        ) {\r\n            this._soundPanner.positionX.value = this._position.x;\r\n            this._soundPanner.positionY.value = this._position.y;\r\n            this._soundPanner.positionZ.value = this._position.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the local direction of the emitter if spatial sound is enabled\r\n     * @param newLocalDirection Defines the new local direction\r\n     */\r\n    public setLocalDirectionToMesh(newLocalDirection: Vector3): void {\r\n        this._localDirection = newLocalDirection;\r\n\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._connectedTransformNode && this.isPlaying) {\r\n            this._updateDirection();\r\n        }\r\n    }\r\n\r\n    private _updateDirection() {\r\n        if (!this._connectedTransformNode || !this._soundPanner) {\r\n            return;\r\n        }\r\n\r\n        const mat = this._connectedTransformNode.getWorldMatrix();\r\n        const direction = Vector3.TransformNormal(this._localDirection, mat);\r\n        direction.normalize();\r\n        this._soundPanner.orientationX.value = direction.x;\r\n        this._soundPanner.orientationY.value = direction.y;\r\n        this._soundPanner.orientationZ.value = direction.z;\r\n    }\r\n\r\n    /** @internal */\r\n    public updateDistanceFromListener() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._connectedTransformNode && this.useCustomAttenuation && this._soundGain && this._scene.activeCamera) {\r\n            const distance = this._scene.audioListenerPositionProvider\r\n                ? this._connectedTransformNode.position.subtract(this._scene.audioListenerPositionProvider()).length()\r\n                : this._connectedTransformNode.getDistanceToCamera(this._scene.activeCamera);\r\n            this._soundGain.gain.value = this._customAttenuationFunction(this._volume, distance, this.maxDistance, this.refDistance, this.rolloffFactor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a new custom attenuation function for the sound.\r\n     * @param callback Defines the function used for the attenuation\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-your-own-custom-attenuation-function\r\n     */\r\n    public setAttenuationFunction(callback: (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => number): void {\r\n        this._customAttenuationFunction = callback;\r\n    }\r\n\r\n    /**\r\n     * Play the sound\r\n     * @param time (optional) Start the sound after X seconds. Start immediately (0) by default.\r\n     * @param offset (optional) Start the sound at a specific time in seconds\r\n     * @param length (optional) Sound duration (in seconds)\r\n     */\r\n    public play(time?: number, offset?: number, length?: number): void {\r\n        if (this._isReadyToPlay && this._scene.audioEnabled && AbstractEngine.audioEngine?.audioContext) {\r\n            try {\r\n                this._clearTimeoutsAndObservers();\r\n\r\n                let startTime = time ? AbstractEngine.audioEngine?.audioContext.currentTime + time : AbstractEngine.audioEngine?.audioContext.currentTime;\r\n                if (!this._soundSource || !this._streamingSource) {\r\n                    if (this._spatialSound && this._soundPanner) {\r\n                        if (!isNaN(this._position.x) && !isNaN(this._position.y) && !isNaN(this._position.z)) {\r\n                            this._soundPanner.positionX.value = this._position.x;\r\n                            this._soundPanner.positionY.value = this._position.y;\r\n                            this._soundPanner.positionZ.value = this._position.z;\r\n                        }\r\n                        if (this._isDirectional) {\r\n                            this._soundPanner.coneInnerAngle = this._coneInnerAngle;\r\n                            this._soundPanner.coneOuterAngle = this._coneOuterAngle;\r\n                            this._soundPanner.coneOuterGain = this._coneOuterGain;\r\n                            if (this._connectedTransformNode) {\r\n                                this._updateDirection();\r\n                            } else {\r\n                                this._soundPanner.setOrientation(this._localDirection.x, this._localDirection.y, this._localDirection.z);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this._streaming) {\r\n                    if (!this._streamingSource && this._htmlAudioElement) {\r\n                        this._streamingSource = AbstractEngine.audioEngine.audioContext.createMediaElementSource(this._htmlAudioElement);\r\n                        this._htmlAudioElement.onended = () => {\r\n                            this._onended();\r\n                        };\r\n                        this._htmlAudioElement.playbackRate = this._playbackRate;\r\n                    }\r\n                    if (this._streamingSource) {\r\n                        this._streamingSource.disconnect();\r\n                        if (this._inputAudioNode) {\r\n                            this._streamingSource.connect(this._inputAudioNode);\r\n                        }\r\n                    }\r\n                    if (this._htmlAudioElement) {\r\n                        // required to manage properly the new suspended default state of Chrome\r\n                        // When the option 'streaming: true' is used, we need first to wait for\r\n                        // the audio engine to be unlocked by a user gesture before trying to play\r\n                        // an HTML Audio element\r\n                        const tryToPlay = () => {\r\n                            if (AbstractEngine.audioEngine?.unlocked) {\r\n                                if (!this._htmlAudioElement) {\r\n                                    return;\r\n                                }\r\n\r\n                                this._htmlAudioElement.currentTime = offset ?? 0;\r\n                                const playPromise = this._htmlAudioElement.play();\r\n\r\n                                // In browsers that don’t yet support this functionality,\r\n                                // playPromise won’t be defined.\r\n                                if (playPromise !== undefined) {\r\n                                    // eslint-disable-next-line github/no-then\r\n                                    playPromise.catch(() => {\r\n                                        // Automatic playback failed.\r\n                                        // Waiting for the audio engine to be unlocked by user click on unmute\r\n                                        AbstractEngine.audioEngine?.lock();\r\n                                        if (this.loop || this.autoplay) {\r\n                                            this._audioUnlockedObserver = AbstractEngine.audioEngine?.onAudioUnlockedObservable.addOnce(() => {\r\n                                                tryToPlay();\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                if (this.loop || this.autoplay) {\r\n                                    this._audioUnlockedObserver = AbstractEngine.audioEngine?.onAudioUnlockedObservable.addOnce(() => {\r\n                                        tryToPlay();\r\n                                    });\r\n                                }\r\n                            }\r\n                        };\r\n                        tryToPlay();\r\n                    }\r\n                } else {\r\n                    const tryToPlay = () => {\r\n                        if (AbstractEngine.audioEngine?.audioContext) {\r\n                            length = length || this._length;\r\n\r\n                            if (offset !== undefined) {\r\n                                this._setOffset(offset);\r\n                            }\r\n\r\n                            if (this._soundSource) {\r\n                                const oldSource = this._soundSource;\r\n                                oldSource.onended = () => {\r\n                                    oldSource.disconnect();\r\n                                };\r\n                            }\r\n                            this._soundSource = AbstractEngine.audioEngine?.audioContext.createBufferSource();\r\n                            if (this._soundSource && this._inputAudioNode) {\r\n                                this._soundSource.buffer = this._audioBuffer;\r\n                                this._soundSource.connect(this._inputAudioNode);\r\n                                this._soundSource.loop = this.loop;\r\n                                if (offset !== undefined) {\r\n                                    this._soundSource.loopStart = offset;\r\n                                }\r\n                                if (length !== undefined) {\r\n                                    this._soundSource.loopEnd = (offset! | 0) + length;\r\n                                }\r\n                                this._soundSource.playbackRate.value = this._playbackRate;\r\n                                this._soundSource.onended = () => {\r\n                                    this._onended();\r\n                                };\r\n                                startTime = time ? AbstractEngine.audioEngine?.audioContext.currentTime + time : AbstractEngine.audioEngine.audioContext.currentTime;\r\n                                const actualOffset = ((this.isPaused ? this.currentTime : 0) + (this._offset ?? 0)) % this._soundSource.buffer!.duration;\r\n                                this._soundSource.start(startTime, actualOffset, this.loop ? undefined : length);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    if (AbstractEngine.audioEngine?.audioContext.state === \"suspended\") {\r\n                        // Wait a bit for FF as context seems late to be ready.\r\n                        this._tryToPlayTimeout = setTimeout(() => {\r\n                            if (AbstractEngine.audioEngine?.audioContext!.state === \"suspended\") {\r\n                                // Automatic playback failed.\r\n                                // Waiting for the audio engine to be unlocked by user click on unmute\r\n                                AbstractEngine.audioEngine.lock();\r\n                                if (this.loop || this.autoplay) {\r\n                                    this._audioUnlockedObserver = AbstractEngine.audioEngine.onAudioUnlockedObservable.addOnce(() => {\r\n                                        tryToPlay();\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                tryToPlay();\r\n                            }\r\n                        }, 500);\r\n                    } else {\r\n                        tryToPlay();\r\n                    }\r\n                }\r\n                this._startTime = startTime;\r\n                this.isPlaying = true;\r\n                this.isPaused = false;\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while trying to play audio: \" + this.name + \", \" + ex.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onended() {\r\n        this.isPlaying = false;\r\n        this._startTime = 0;\r\n        this._currentTime = 0;\r\n        if (this.onended) {\r\n            this.onended();\r\n        }\r\n        this.onEndedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Stop the sound\r\n     * @param time (optional) Stop the sound after X seconds. Stop immediately (0) by default.\r\n     */\r\n    public stop(time?: number): void {\r\n        if (this.isPlaying) {\r\n            this._clearTimeoutsAndObservers();\r\n            if (this._streaming) {\r\n                if (this._htmlAudioElement) {\r\n                    this._htmlAudioElement.pause();\r\n                    // Test needed for Firefox or it will generate an Invalid State Error\r\n                    if (this._htmlAudioElement.currentTime > 0) {\r\n                        this._htmlAudioElement.currentTime = 0;\r\n                    }\r\n                } else {\r\n                    this._streamingSource?.disconnect();\r\n                }\r\n                this.isPlaying = false;\r\n            } else if (AbstractEngine.audioEngine?.audioContext && this._soundSource) {\r\n                const stopTime = time ? AbstractEngine.audioEngine.audioContext.currentTime + time : undefined;\r\n                this._soundSource.onended = () => {\r\n                    this.isPlaying = false;\r\n                    this.isPaused = false;\r\n                    this._startTime = 0;\r\n                    this._currentTime = 0;\r\n                    if (this._soundSource) {\r\n                        this._soundSource.onended = () => void 0;\r\n                    }\r\n                    this._onended();\r\n                };\r\n                this._soundSource.stop(stopTime);\r\n            } else {\r\n                this.isPlaying = false;\r\n            }\r\n        } else if (this.isPaused) {\r\n            this.isPaused = false;\r\n            this._startTime = 0;\r\n            this._currentTime = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Put the sound in pause\r\n     */\r\n    public pause(): void {\r\n        if (this.isPlaying) {\r\n            this._clearTimeoutsAndObservers();\r\n            if (this._streaming) {\r\n                if (this._htmlAudioElement) {\r\n                    this._htmlAudioElement.pause();\r\n                } else {\r\n                    this._streamingSource?.disconnect();\r\n                }\r\n                this.isPlaying = false;\r\n                this.isPaused = true;\r\n            } else if (AbstractEngine.audioEngine?.audioContext && this._soundSource) {\r\n                this._soundSource.onended = () => void 0;\r\n                this._soundSource.stop();\r\n                this.isPlaying = false;\r\n                this.isPaused = true;\r\n                this._currentTime += AbstractEngine.audioEngine.audioContext.currentTime - this._startTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a dedicated volume for this sounds\r\n     * @param newVolume Define the new volume of the sound\r\n     * @param time Define time for gradual change to new volume\r\n     */\r\n    public setVolume(newVolume: number, time?: number): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._soundGain) {\r\n            if (time && AbstractEngine.audioEngine.audioContext) {\r\n                this._soundGain.gain.cancelScheduledValues(AbstractEngine.audioEngine.audioContext.currentTime);\r\n                this._soundGain.gain.setValueAtTime(this._soundGain.gain.value, AbstractEngine.audioEngine.audioContext.currentTime);\r\n                this._soundGain.gain.linearRampToValueAtTime(newVolume, AbstractEngine.audioEngine.audioContext.currentTime + time);\r\n            } else {\r\n                this._soundGain.gain.value = newVolume;\r\n            }\r\n        }\r\n        this._volume = newVolume;\r\n    }\r\n\r\n    /**\r\n     * Set the sound play back rate\r\n     * @param newPlaybackRate Define the playback rate the sound should be played at\r\n     */\r\n    public setPlaybackRate(newPlaybackRate: number): void {\r\n        this._playbackRate = newPlaybackRate;\r\n        if (this.isPlaying) {\r\n            if (this._streaming && this._htmlAudioElement) {\r\n                this._htmlAudioElement.playbackRate = this._playbackRate;\r\n            } else if (this._soundSource) {\r\n                this._soundSource.playbackRate.value = this._playbackRate;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the sound play back rate.\r\n     * @returns the  play back rate of the sound\r\n     */\r\n    public getPlaybackRate(): number {\r\n        return this._playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Gets the volume of the sound.\r\n     * @returns the volume of the sound\r\n     */\r\n    public getVolume(): number {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * Attach the sound to a dedicated mesh\r\n     * @param transformNode The transform node to connect the sound with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#attaching-a-sound-to-a-mesh\r\n     */\r\n    public attachToMesh(transformNode: TransformNode): void {\r\n        if (this._connectedTransformNode && this._registerFunc) {\r\n            this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n            this._registerFunc = null;\r\n        }\r\n        this._connectedTransformNode = transformNode;\r\n        if (!this._spatialSound) {\r\n            this._spatialSound = true;\r\n            this._createSpatialParameters();\r\n            if (this.isPlaying && this.loop) {\r\n                this.stop();\r\n                this.play(0, this._offset, this._length);\r\n            }\r\n        }\r\n        this._onRegisterAfterWorldMatrixUpdate(this._connectedTransformNode);\r\n        this._registerFunc = (transformNode: TransformNode) => this._onRegisterAfterWorldMatrixUpdate(transformNode);\r\n        this._connectedTransformNode.registerAfterWorldMatrixUpdate(this._registerFunc);\r\n    }\r\n\r\n    /**\r\n     * Detach the sound from the previously attached mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#attaching-a-sound-to-a-mesh\r\n     */\r\n    public detachFromMesh() {\r\n        if (this._connectedTransformNode && this._registerFunc) {\r\n            this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n            this._registerFunc = null;\r\n            this._connectedTransformNode = null;\r\n        }\r\n    }\r\n\r\n    private _onRegisterAfterWorldMatrixUpdate(node: TransformNode): void {\r\n        if (!(<any>node).getBoundingInfo) {\r\n            this.setPosition(node.absolutePosition);\r\n        } else {\r\n            const mesh = node as AbstractMesh;\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n            this.setPosition(boundingInfo.boundingSphere.centerWorld);\r\n        }\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._isDirectional && this.isPlaying) {\r\n            this._updateDirection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current sound in the scene.\r\n     * @returns the new sound clone\r\n     */\r\n    public clone(): Nullable<Sound> {\r\n        if (!this._streaming) {\r\n            const setBufferAndRun = () => {\r\n                _RetryWithInterval(\r\n                    () => this._isReadyToPlay,\r\n                    () => {\r\n                        clonedSound._audioBuffer = this.getAudioBuffer();\r\n                        clonedSound._isReadyToPlay = true;\r\n                        if (clonedSound.autoplay) {\r\n                            clonedSound.play(0, this._offset, this._length);\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    300\r\n                );\r\n            };\r\n\r\n            const currentOptions = {\r\n                autoplay: this.autoplay,\r\n                loop: this.loop,\r\n                volume: this._volume,\r\n                spatialSound: this._spatialSound,\r\n                maxDistance: this.maxDistance,\r\n                useCustomAttenuation: this.useCustomAttenuation,\r\n                rolloffFactor: this.rolloffFactor,\r\n                refDistance: this.refDistance,\r\n                distanceModel: this.distanceModel,\r\n            };\r\n\r\n            const clonedSound = new Sound(this.name + \"_cloned\", new ArrayBuffer(0), this._scene, null, currentOptions);\r\n            if (this.useCustomAttenuation) {\r\n                clonedSound.setAttenuationFunction(this._customAttenuationFunction);\r\n            }\r\n            clonedSound.setPosition(this._position);\r\n            clonedSound.setPlaybackRate(this._playbackRate);\r\n            setBufferAndRun();\r\n\r\n            return clonedSound;\r\n        }\r\n        // Can't clone a streaming sound\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current underlying audio buffer containing the data\r\n     * @returns the audio buffer\r\n     */\r\n    public getAudioBuffer(): Nullable<AudioBuffer> {\r\n        return this._audioBuffer;\r\n    }\r\n\r\n    /**\r\n     * Gets the WebAudio AudioBufferSourceNode, lets you keep track of and stop instances of this Sound.\r\n     * @returns the source node\r\n     */\r\n    public getSoundSource(): Nullable<AudioBufferSourceNode> {\r\n        return this._soundSource;\r\n    }\r\n\r\n    /**\r\n     * Gets the WebAudio GainNode, gives you precise control over the gain of instances of this Sound.\r\n     * @returns the gain node\r\n     */\r\n    public getSoundGain(): Nullable<GainNode> {\r\n        return this._soundGain;\r\n    }\r\n\r\n    /**\r\n     * Serializes the Sound in a JSON representation\r\n     * @returns the JSON representation of the sound\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {\r\n            name: this.name,\r\n            url: this._url,\r\n            autoplay: this.autoplay,\r\n            loop: this.loop,\r\n            volume: this._volume,\r\n            spatialSound: this._spatialSound,\r\n            maxDistance: this.maxDistance,\r\n            rolloffFactor: this.rolloffFactor,\r\n            refDistance: this.refDistance,\r\n            distanceModel: this.distanceModel,\r\n            playbackRate: this._playbackRate,\r\n            panningModel: this._panningModel,\r\n            soundTrackId: this.soundTrackId,\r\n            metadata: this.metadata,\r\n        };\r\n\r\n        if (this._spatialSound) {\r\n            if (this._connectedTransformNode) {\r\n                serializationObject.connectedMeshId = this._connectedTransformNode.id;\r\n            }\r\n\r\n            serializationObject.position = this._position.asArray();\r\n            serializationObject.refDistance = this.refDistance;\r\n            serializationObject.distanceModel = this.distanceModel;\r\n\r\n            serializationObject.isDirectional = this._isDirectional;\r\n            serializationObject.localDirectionToMesh = this._localDirection.asArray();\r\n            serializationObject.coneInnerAngle = this._coneInnerAngle;\r\n            serializationObject.coneOuterAngle = this._coneOuterAngle;\r\n            serializationObject.coneOuterGain = this._coneOuterGain;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON representation of a sound to instantiate in a given scene\r\n     * @param parsedSound Define the JSON representation of the sound (usually coming from the serialize method)\r\n     * @param scene Define the scene the new parsed sound should be created in\r\n     * @param rootUrl Define the rooturl of the load in case we need to fetch relative dependencies\r\n     * @param sourceSound Define a sound place holder if do not need to instantiate a new one\r\n     * @returns the newly parsed sound\r\n     */\r\n    public static Parse(parsedSound: any, scene: Scene, rootUrl: string, sourceSound?: Sound): Sound {\r\n        const soundName = parsedSound.name;\r\n        let soundUrl;\r\n\r\n        if (parsedSound.url) {\r\n            soundUrl = rootUrl + parsedSound.url;\r\n        } else {\r\n            soundUrl = rootUrl + soundName;\r\n        }\r\n\r\n        const options = {\r\n            autoplay: parsedSound.autoplay,\r\n            loop: parsedSound.loop,\r\n            volume: parsedSound.volume,\r\n            spatialSound: parsedSound.spatialSound,\r\n            maxDistance: parsedSound.maxDistance,\r\n            rolloffFactor: parsedSound.rolloffFactor,\r\n            refDistance: parsedSound.refDistance,\r\n            distanceModel: parsedSound.distanceModel,\r\n            playbackRate: parsedSound.playbackRate,\r\n        };\r\n\r\n        let newSound: Sound;\r\n\r\n        if (!sourceSound) {\r\n            newSound = new Sound(\r\n                soundName,\r\n                soundUrl,\r\n                scene,\r\n                () => {\r\n                    scene.removePendingData(newSound);\r\n                },\r\n                options\r\n            );\r\n            scene.addPendingData(newSound);\r\n        } else {\r\n            const setBufferAndRun = () => {\r\n                _RetryWithInterval(\r\n                    () => sourceSound._isReadyToPlay,\r\n                    () => {\r\n                        newSound._audioBuffer = sourceSound.getAudioBuffer();\r\n                        newSound._isReadyToPlay = true;\r\n                        if (newSound.autoplay) {\r\n                            newSound.play(0, newSound._offset, newSound._length);\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    300\r\n                );\r\n            };\r\n\r\n            newSound = new Sound(soundName, new ArrayBuffer(0), scene, null, options);\r\n            setBufferAndRun();\r\n        }\r\n\r\n        if (parsedSound.position) {\r\n            const soundPosition = Vector3.FromArray(parsedSound.position);\r\n            newSound.setPosition(soundPosition);\r\n        }\r\n        if (parsedSound.isDirectional) {\r\n            newSound.setDirectionalCone(parsedSound.coneInnerAngle || 360, parsedSound.coneOuterAngle || 360, parsedSound.coneOuterGain || 0);\r\n            if (parsedSound.localDirectionToMesh) {\r\n                const localDirectionToMesh = Vector3.FromArray(parsedSound.localDirectionToMesh);\r\n                newSound.setLocalDirectionToMesh(localDirectionToMesh);\r\n            }\r\n        }\r\n        if (parsedSound.connectedMeshId) {\r\n            const connectedMesh = scene.getMeshById(parsedSound.connectedMeshId);\r\n            if (connectedMesh) {\r\n                newSound.attachToMesh(connectedMesh);\r\n            }\r\n        }\r\n\r\n        if (parsedSound.metadata) {\r\n            newSound.metadata = parsedSound.metadata;\r\n        }\r\n\r\n        return newSound;\r\n    }\r\n\r\n    private _setOffset(value?: number) {\r\n        if (this._offset === value) {\r\n            return;\r\n        }\r\n        if (this.isPaused) {\r\n            this.stop();\r\n            this.isPaused = false;\r\n        }\r\n        this._offset = value;\r\n    }\r\n\r\n    private _clearTimeoutsAndObservers() {\r\n        if (this._tryToPlayTimeout) {\r\n            clearTimeout(this._tryToPlayTimeout);\r\n            this._tryToPlayTimeout = null;\r\n        }\r\n        if (this._audioUnlockedObserver) {\r\n            AbstractEngine.audioEngine?.onAudioUnlockedObservable.remove(this._audioUnlockedObserver);\r\n            this._audioUnlockedObserver = null;\r\n        }\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.Sound\", Sound);\r\n"],
  "mappings": "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",
  "names": ["_a", "_b", "_c", "transformNode"]
}
